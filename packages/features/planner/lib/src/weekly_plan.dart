import 'package:core_kit/core_kit.dart';

/// Groups the meals planned for a specific calendar day.
class PlannedDay {
  PlannedDay({
    required this.date,
    required List<MealEntry> meals,
  }) : meals = List<MealEntry>.unmodifiable(meals);

  /// The date represented by the plan. Time information is stripped.
  final DateTime date;

  /// Meals assigned to this date ordered chronologically.
  final List<MealEntry> meals;
}

/// Seven day meal plan generated by the [PlannerService].
class WeeklyMealPlan {
  WeeklyMealPlan({
    required this.startDate,
    required List<PlannedDay> days,
  })  : days = List<PlannedDay>.unmodifiable(days),
        _meals = List<MealEntry>.unmodifiable(
          days.expand((day) => day.meals),
        );

  /// First day covered by the plan.
  final DateTime startDate;

  /// Planned days in chronological order.
  final List<PlannedDay> days;

  final List<MealEntry> _meals;

  /// Date of the last planned day (inclusive).
  DateTime get endDate =>
      startDate.add(Duration(days: days.isEmpty ? 0 : days.length - 1));

  /// All meals contained in the plan flattened chronologically.
  List<MealEntry> get meals => _meals;

  /// Returns the planned day matching [date] if present.
  PlannedDay? dayFor(DateTime date) {
    final normalized = DateTime(date.year, date.month, date.day);
    for (final day in days) {
      final candidate = DateTime(day.date.year, day.date.month, day.date.day);
      if (candidate == normalized) {
        return day;
      }
    }
    return null;
  }
}
